1. Crie um banco de dados chamado academico no MongoDB.

db.createCollection("aluno", {
  validator: {
    $jsonSchema: {
       bsonType: "object",
       required: ["nome"]
       properties: {
          name: { bsonType: "string", description: "deve ser uma string e obrigatorio" }
       }
    }
  }
);

db.createCollection("disciplina", {
  validator: {
    $jsonSchema: {
       bsonType: "object",
       required: ["nome"]
       properties: {
          name: { bsonType: "string", description: "deve ser uma string e obrigatorio" },
	  cargaHoraria : { bsonType: "int", minimum: 0 "description: "deve ser um inteiro maior igual a 0" }
       }
    }
  }
);

db.createCollection("professor", {
  validator: {
    $jsonSchema: {
       bsonType: "object",
       required: ["nome", "titulacao"]
       properties: {
          name: { bsonType: "string", description: "deve ser uma string e obrigatorio" },
          titulacao: { bsonType: "string", description: "deve ser uma string e obrigatorio" },
       }
    }
  }
);

db.createCollection("turma", {
  validator: {
    $jsonSchema: {
       bsonType: "object",
       required: ["numPeriodo"]
       properties: {
         idProfessor: { bsonType: "objectId", description: "deve ser um objectId" },
	 idDisciplina: { bsonType: "objectId", description: "deve ser um objectId" },
	 horarioAula: { bsonType: "string", description: "deve ser uma string" },
	 numSala: { bsonType: "string", description: "deve ser uma string" }
       }
    }
  }
);

db.createCollection("historico", {
  validator: {
    $jsonSchema: {
       bsonType: "object",
       required: ["idTurma, idAluno"]
       properties: {
         idTurma: { bsonType: "objectId", description: "deve ser um objectId" },
	 idAluno: { bsonType: "objectId", description: "deve ser um objectId" },
	 numFaltas: { bsonType: "int", description: "deve ser um int" },
	 mediaFinal: { bsonType: "double", description: "deve ser um double" }
       }
    }
  }
);



2. Elabore os comandos em um banco de dados MongoDB.

b) Insira um documento na coleção aluno preechendo somente a coluna _id com o valor 1. Qual foi o resultado?

	RESPOSTA:

db.aluno.insert({_id: 1})

WriteResult({
        "nInserted" : 0,
        "writeError" : {
                "code" : 121,
                "errmsg" : "Document failed validation"
        }
})

c) Insira os seguintes documentos na coleção aluno.

_id        nome
1          JOSE
2          MARIA
3          BRUNO
4          CARLA
5          PEDRO

	RESPOSTA:

db.aluno.insert({_id: 1, nome: "JOSE"})
db.aluno.insert({_id: 2, nome: "MARIA"})
db.aluno.insert({_id: 3, nome: "BRUNO"})
db.aluno.insert({_id: 4, nome: "CARLA"})
db.aluno.insert({_id: 5, nome: "PEDRO"})


d) Insira um documento na coleção disciplina com os valores 1 para _id, BANCO DE DADOS I para nome e -1 para cargaHoraria. Qual foi o resultado?

	RESPOSTA:

db.disciplina.insert({_id: 1, nome: "BANCO DE DADOS I", carga_Horaria: -1})

WriteResult({
        "nInserted" : 0,
        "writeError" : {
         "code" : 121,
         "errmsg" : "Document failed validation"
        }
})


e) Insira os seguintes documentos na coleção disciplina.

_id              nome                cargaHoraria
1                BANCO DE DADOS I    60
2                BANCO DE DADOS II   60

	RESPOSTA:

db.disciplina.insert({_id: 1, nome: "BANCO DE DADOS I", cargaHoraria: NumberInt(60)})
db.disciplina.insert({_id: 2, nome: "BANCO DE DADOS II", cargaHoraria: NumberInt(60)})

f) Insira os seguintes documentos na coleção professor.
_id            nome
1              LETICIA
2              JOSE REGINALDO

	RESPOSTA:

db.professor.insert({_id: 1, nome: "LETICIA", titulacao: "DOUTORA"})
db.professor.insert({_id: 2, nome: "JOSE REGINALDO", titulacao: "DOUTOR"})

g) Insira um documento na coleção turma com os valores 1 para _id, 20192 para numPeriodo. Qual foi o resultado?

	RESPOSTA:

db.turma.insert({_id: 1, numPeriodo: 20192})
WriteResult({ "nInserted" : 1 })

h) Insira um documento na coleção turma com os valores 1 para _id, 20201 para numPeriodo. Qual foi o resultado?

	RESPOSTA:

db.turma.insert({_id: 1, num_Periodo: 20201})

WriteResult({
        "nInserted" : 0,
        "writeError" : {
                "code" : 11000,
                "errmsg" : "E11000 duplicate key error collection: academico.turma index: _id_ dup key: { _id: 1.0 }"
        }
})

i) Insira um documento na coleção turma com os valores 2 para _id, 20201 para numPeriodo e 3 para idProfessor. Qual foi o resultado?

	RESPOSTA:

db.turma.insert({_id: 2, numPeriodo: 20201, idProfessor: 3})

j) Insira os documentos na coleção turma.

_id         numPeriodo   idProfessor  idDisciplina
3          20201         1             1
4          20202         2             2

	RESPOSTA:

db.turma.insert({_id: 3, numPeriodo: 20201, idProfessor: 1, idDisciplina: 1})
db.turma.insert({_id: 4, numPeriodo: 20202, idProfessor: 2 idDisciplina: 2})

k) Insira os registros na coleção historico.

_id             idTurma   idAluno
1               1          1
2               1          2
3               1          3
4               1          4
5               3          1
6               3          2
7               4          3
8               4          4

	RESPOSTA:

db.historico.insert({_id: 1, idTurma: 1, idAluno: 1})
db.historico.insert({_id: 2, idTurma: 1, idAluno: 2})
db.historico.insert({_id: 3, idTurma: 1, idAluno: 3})
db.historico.insert({_id: 4, idTurma: 1, idAluno: 4})
db.historico.insert({_id: 5, idTurma: 3, idAluno: 1})
db.historico.insert({_id: 6, idTurma: 3, idAluno: 2})
db.historico.insert({_id: 7, idTurma: 4, idAluno: 3})
db.historico.insert({_id: 8, idTurma: 4, idAluno: 4})
	   
l) Altere o nome do aluno JOSE para JOAO.

	RESPOSTA:

db.aluno.update({nome: "JOSE"}, {nome: "JOAO"})
WriteResult({ "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 })

m) Altere o _id de BANCO DE DADOS I para o valor 3. Qual foi o resultado?

	RESPOSTA:

db.disciplina.update({nome: "BANCO DE DADOS I"}, {_id: 3})
WriteResult({
        "nMatched" : 0,
        "nUpserted" : 0,
        "nModified" : 0,
        "writeError" : {
                "code" : 66,
                "errmsg" : "After applying the update, the (immutable) field '_id' was found to have been altered to _id: 3.0"
        }
})

n) Altere a mediaFinal dos alunos que estão na turma de BANCO DE DADOS II para 5.

	RESPOSTA:

db.historico.update({idTurma: 4}, {mediaFinal: 5})

o) Exclua o aluno PEDRO. Qual foi o resultado?

	RESPOSTA:

db.aluno.remove({nome: "PEDRO"});
WriteResult({ "nRemoved" : 1 })

p) Exclua a disciplina BANCO DE DADOS II. Qual foi o resultado?

	RESPOSTA:

db.disciplina.remove({nome: "BANCO DE DADOS II"});
WriteResult({ "nRemoved" : 1 })

q) Exclua o professor JOSE REGINALDO. Qual foi o resultado?

	RESPOSTA:

db.professor.remove({nome: "JOSE REGINALDO"});
WriteResult({ "nRemoved" : 1 })
